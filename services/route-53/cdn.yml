Parameters:
  CertificateArn:
    Type: String
  BucketName:
    Type: String
  DomainName:
    Type: String
  S3Hosting:
    Type: String

Description: CDN stack that ties domain name and acm together

Resources:
  CDNOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "Cloudfront Origin identity for ${DomainName}"

  CDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub "app.${DomainName}"
        DefaultCacheBehavior:
          AllowedMethods:
              - GET
              - HEAD
          CachedMethods:
              - GET
              - HEAD
          ForwardedValues:
            QueryString: True
          TargetOriginId: !Sub "S3-${BucketName}"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: True
        Origins:
          #hardcoding the region bucket url, need to use regrex for subsitution later
          - DomainName: !Sub "${BucketName}.s3.us-east-1.amazonaws.com"
            Id: !Sub "S3-${BucketName}"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CDNOriginIdentity}"
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
      
      #this may not work, need to confirm tomorrow
      S3HostingBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref S3Hosting
          PolicyDocument:
            Statement:
              - Action:
                  - "s3:GetObject"
                Effect: Allow
                Principal:
                  AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CDNOriginIdentity}"
                Resource: !Sub "arn:aws:s3:::${S3Hosting}/*"
  