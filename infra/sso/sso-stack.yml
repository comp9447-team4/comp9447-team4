AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This defines the permission set for AWS SSO to be run in the master account.
Parameters:
  SSOInstanceArn:
    Type: String
    Description: The instance arn of SSO. See aws sso-admin help to get the instance arn.
  SSOAdministratorsGroupId:
    Type: String
    Description: The SSO group id of administrators in SSO
  SSODevelopersGroupId:
    Type: String
    Description: The SSO group id of developers
  MasterAccountId:
    Type: String
    Description: Master account id (root of org)
  QaAccountId:
    Type: String
    Description: Qa account id
  ProdAccountId:
    Type: String
    Description: Prod account id
  SSOInstanceArn:
    Type: String
    Default: arn:aws:sso:::instance/ssoins-8259a65681d80bfc

Resources:
  # For Developers
  DeveloperAccessPermissionSet:
    Type: AWS::SSO::PermissionSet
    Properties:
      Name: DeveloperAccess
      Description: DeveloperAccess
      InstanceArn: !Ref SSOInstanceArn
      InlinePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "DenyAdmin",
              "Effect": "Deny",
              "Action": [
                "organizations:*",
                "account:*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "DenyChangesToSSO",
              "Effect": "Deny",
              "Action": [
                "iam:*"
              ],
              "Resource": [
                "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*/AWSReservedSSO_*"
              ]
            },
            {
              "Sid": "DenyChangesToSSOServiceRole",
              "Effect": "Deny",
              "Action": [
                "iam:*"
              ],
              "Resource": [
                "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
              ]
            },
            {
              "Sid": "DenyOtherRegions",
              "Effect": "Deny",
              "Action": [
                "ec2:*",
                "cloudformation:*",
                "lambda:*",
                "ecs:*",
                "codepipeline:*",
                "codedeploy:*",
                "codebuild:*",
                "cloudwatch:*",
                "redshift:*",
                "sagemaker:*",
                "ecr:*",
                "eks:*",
                "apigateway:*"
              ],
              "Resource": "*",
              "Condition": {
                "ForAnyValue:StringEquals": {
                  "aws:RequestedRegion": [
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "af-south-1",
                    "ap-east-1",
                    "ap-south-1",
                    "ap-northeast-3",
                    "ap-northeast-2",
                    "ap-southeast-1",
                    "ap-southeast-2",
                    "ap-northeast-1",
                    "ca-central-1",
                    "eu-central-1",
                    "eu-west-1",
                    "eu-west-2",
                    "eu-south-1",
                    "eu-west-3",
                    "eu-north-1",
                    "me-south-1",
                    "sa-east-1"
                  ]
                }
              }
            },
            {
              "Sid": "AllowRest",
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            }
          ]
        }
      # TODO: tigten the allow list to specific (regional & global) services by whitelisting
      # instead of blacklististing.
      # This will be clearer once we know what services we need.

  # For Admins
  AdministratorAccessPermissionSet:
    Type: AWS::SSO::PermissionSet
    Properties:
      Name: AdministratorAccess
      Description: Administrator
      InstanceArn: !Ref SSOInstanceArn
      ManagedPolicies:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Assignments
  AdminstratorsMasterAssignment:
    Type: AWS::SSO::Assignment
    Properties:
      InstanceArn: !Ref SSOInstanceArn
      PermissionSetArn: !GetAtt AdministratorAccessPermissionSet.PermissionSetArn
      PrincipalId: !Ref SSOAdministratorsGroupId
      PrincipalType: GROUP
      TargetId: !Ref MasterAccountId
      TargetType: AWS_ACCOUNT
  AdminstratorsQaAssignment:
    Type: AWS::SSO::Assignment
    Properties:
      InstanceArn: !Ref SSOInstanceArn
      PermissionSetArn: !GetAtt AdministratorAccessPermissionSet.PermissionSetArn
      PrincipalId: !Ref SSOAdministratorsGroupId
      PrincipalType: GROUP
      TargetId: !Ref QaAccountId
      TargetType: AWS_ACCOUNT
  DevelopersQaAssignment:
    Type: AWS::SSO::Assignment
    Properties:
      InstanceArn: !Ref SSOInstanceArn
      PermissionSetArn: !GetAtt DeveloperAccessPermissionSet.PermissionSetArn
      PrincipalId: !Ref SSODevelopersGroupId
      PrincipalType: GROUP
      TargetId: !Ref QaAccountId
      TargetType: AWS_ACCOUNT
  AdminstratorsProdAssignment:
    Type: AWS::SSO::Assignment
    Properties:
      InstanceArn: !Ref SSOInstanceArn
      PermissionSetArn: !GetAtt AdministratorAccessPermissionSet.PermissionSetArn
      PrincipalId: !Ref SSOAdministratorsGroupId
      PrincipalType: GROUP
      TargetId: !Ref ProdAccountId
      TargetType: AWS_ACCOUNT
  DevelopersProdAssignment:
    Type: AWS::SSO::Assignment
    Properties:
      InstanceArn: !Ref SSOInstanceArn
      PermissionSetArn: !GetAtt DeveloperAccessPermissionSet.PermissionSetArn
      PrincipalId: !Ref SSODevelopersGroupId
      PrincipalType: GROUP
      TargetId: !Ref ProdAccountId
      TargetType: AWS_ACCOUNT


