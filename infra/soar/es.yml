---
AWSTemplateFormatVersion: '2010-09-09'
Description: ElasticSearch

Mappings:
  Branch:
    us-east-1:
      qa: master
      prod: release

Parameters:
  AwsEnvironment:
    Type: String
    AllowedValues:
    - qa
    - prod

Resources:
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Sub "${AwsEnvironment}-comp9447-team4-es"
      ElasticsearchVersion: 7.1
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: "true"
        InstanceCount: "2"
        ZoneAwarenessEnabled: "true"
        # Free tier
        InstanceType: "t2.small.elasticsearch"
        DedicatedMasterType: "t2.small.elasticsearch"
        DedicatedMasterCount: "3"
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: "gp2"
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"
      # https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html
      CognitoOptions:
        Enabled: true
        IdentityPoolId: !Ref CognitoIdentityPool
        UserPoolId: !Ref CognitoUserPool
        RoleArn: !GetAtt CognitoAccessForAmazonES.Arn
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Sid: "AllowDevRole"
          Principal:
            AWS: !GetAtt CognitoAccessForAmazonES.Arn
          Action:
          - "es:*"
          Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AwsEnvironment}-comp9447-team4-es/*"

  CognitoAccessForAmazonES:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CognitoAccessForAmazonES
      # https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html#es-cognito-auth-troubleshooting
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      Policies:
      - PolicyName: AllowAllES
        PolicyDocument: >-
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "iam:GetRole",
                  "iam:PassRole",
                  "iam:CreateRole",
                  "iam:AttachRolePolicy",
                  "ec2:DescribeVpcs",
                  "cognito-identity:ListIdentityPools",
                  "cognito-idp:ListUserPools"
                ],
                "Resource": "*"
              }
            ]
          }
      AssumeRolePolicyDocument: !Sub >-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "es.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AuthenticatedRoleForESCognito
      # https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html#es-cognito-auth-troubleshooting
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      Policies:
      - PolicyName: AllowAllES
        PolicyDocument: >-
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "es:*"
                ],
                "Resource": "*"
              }
            ]
          }
      AssumeRolePolicyDocument: !Sub >-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": "${CognitoIdentityPool}"
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        }


  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AwsEnvironment}_es_user_pool"

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "qa_es_identity_pool"
      # https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html
      # you must allow unauthenticated then ES unsets it for you
      AllowUnauthenticatedIdentities: true

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub ${AwsEnvironment}-comp9447-team4-es
      UserPoolId: !Ref CognitoUserPool

  # Must give cognito identity pool a role once authenticated
  # I don't know WHY THE FK it cant do it via here, it must be done via the UI
  # CognitoIdentityPoolAttachment:
  #   Type: AWS::Cognito::IdentityPoolRoleAttachment
  #   Properties: 
  #     IdentityPoolId: !Ref CognitoIdentityPool
  #     Roles:
  #       authenticated: !Ref AuthenticatedRole

  # Export this SNS topic.
  # https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/alerting.html
  # Get a lambda to subscribe to it which would forward alerts to Discord.
  EsAlertsToDiscordTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EsAlertsToDiscordTopic


  # Give a policy to allow codestar to publish messages to sns
  EsToSnsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: >-
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "es.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        }
      Description: Allows ES to publish to an SNS which is forwarded to Discord
      Policies:
      - PolicyName: AllowEsToPublishToSns
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref EsAlertsToDiscordTopic
      RoleName: !Sub "${AwsEnvironment}-es-alerts-to-discord-topic"

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      # https://docs.aws.amazon.com/dtconsole/latest/userguide/set-up-sns.html
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            Service:
            - es.amazonaws.com
          Action:
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource: !Ref EsAlertsToDiscordTopic
          Condition:
            StringEquals:
              AWS:SourceOwner: !Sub "${AWS::AccountId}"
        - Sid: AWSCodeStarNotifications_publish
          Effect: Allow
          Principal:
            Service:
            - es.amazonaws.com
          Action: SNS:Publish
          Resource: !Ref EsAlertsToDiscordTopic
      Topics:
      - !Ref EsAlertsToDiscordTopic


Outputs:
  UserPoolUrl:
    Value: !GetAtt CognitoUserPool.ProviderURL
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UserPoolUrl' ] ]
  DomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
    Export:
      Name: !Sub "${AWS::StackName}:DomainEndpoint"
  EsAlertsToDiscordTopic:
    Value: !Ref EsAlertsToDiscordTopic
    Export:
      Name: !Sub "${AWS::StackName}:EsAlertsToDiscordTopic"
  EsToSnsRole:
    Value: !Ref EsToSnsRole
    Export:
      Name: !Sub "${AWS::StackName}:EsToSnsRole"