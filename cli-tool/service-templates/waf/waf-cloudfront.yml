{
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: '(SO0006) - AWS WAF Security Automations v2.3.3: This AWS CloudFormation\n  template helps you provision the AWS WAF Security Automations stack without worrying\n  about creating and configuring the underlying AWS infrastructure.\n\n  **WARNING** This template creates an AWS Lambda function, an AWS WAF Web ACL, an\n  Amazon S3 bucket, and an Amazon CloudWatch custom metric. You will be billed for\n  the AWS resources used if you create a stack from this template.'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n    - Label:\n        default: Protection List\n      Parameters:\n      - ActivateSqlInjectionProtectionParam\n      - ActivateCrossSiteScriptingProtectionParam\n      - ActivateHttpFloodProtectionParam\n      - ActivateScannersProbesProtectionParam\n      - ActivateReputationListsProtectionParam\n      - ActivateBadBotProtectionParam\n    - Label:\n        default: Settings\n      Parameters:\n      - EndpointType\n      - AppAccessLogBucket\n    - Label:\n        default: Advanced Settings\n      Parameters:\n      - RequestThreshold\n      - ErrorThreshold\n      - WAFBlockPeriod\n      - KeepDataInOriginalS3Location\n    ParameterLabels:\n      ActivateSqlInjectionProtectionParam:\n        default: Activate SQL Injection Protection\n      ActivateCrossSiteScriptingProtectionParam:\n        default: Activate Cross-site Scripting Protection\n      ActivateHttpFloodProtectionParam:\n        default: Activate HTTP Flood Protection\n      ActivateScannersProbesProtectionParam:\n        default: Activate Scanner & Probe Protection\n      ActivateReputationListsProtectionParam:\n        default: Activate Reputation List Protection\n      ActivateBadBotProtectionParam:\n        default: Activate Bad Bot Protection\n      EndpointType:\n        default: Endpoint Type\n      AppAccessLogBucket:\n        default: Application Access Log Bucket Name\n      RequestThreshold:\n        default: Request Threshold\n      ErrorThreshold:\n        default: Error Threshold\n      WAFBlockPeriod:\n        default: WAF Block Period\n      KeepDataInOriginalS3Location:\n        default: Keep Data in Original s3 location\nParameters:\n  ActivateSqlInjectionProtectionParam:\n    Type: String\n    Default: 'yes'\n    AllowedValues:\n    - 'yes'\n    - 'no'\n    Description: Choose yes to enable the component designed to block common SQL injection\n      attacks.\n  ActivateCrossSiteScriptingProtectionParam:\n    Type: String\n    Default: 'yes'\n    AllowedValues:\n    - 'yes'\n    - 'no'\n    Description: Choose yes to enable the component designed to block common XSS attacks.\n  ActivateHttpFloodProtectionParam:\n    Type: String\n    Default: yes - AWS WAF rate based rule\n    AllowedValues:\n    - yes - AWS WAF rate based rule\n    - yes - AWS Lambda log parser\n    - yes - Amazon Athena log parser\n    - 'no'\n    Description: Choose yes to enable the component designed to block HTTP flood attacks.\n  ActivateScannersProbesProtectionParam:\n    Type: String\n    Default: yes - AWS Lambda log parser\n    AllowedValues:\n    - yes - AWS Lambda log parser\n    - yes - Amazon Athena log parser\n    - 'no'\n    Description: Choose yes to enable the component designed to block scanners and\n      probes.\n  ActivateReputationListsProtectionParam:\n    Type: String\n    Default: 'yes'\n    AllowedValues:\n    - 'yes'\n    - 'no'\n    Description: 'Choose yes to block requests from IP addresses on third-party reputation\n      lists (supported lists: spamhaus, torproject, and emergingthreats).'\n  ActivateBadBotProtectionParam:\n    Type: String\n    Default: 'yes'\n    AllowedValues:\n    - 'yes'\n    - 'no'\n    Description: Choose yes to enable the component designed to block bad bots and\n      content scrapers.\n  EndpointType:\n    Type: String\n    Default: CloudFront\n    AllowedValues:\n    - CloudFront\n    - ALB\n    Description: Select the type of resource being used.\n  AppAccessLogBucket:\n    Type: String\n    Default: ''\n    AllowedPattern: (^$|^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d]$)\n    Description: 'If you chose yes for the Activate Scanners & Probes Protection parameter,\n      enter a name for the  Amazon S3 bucket where you want to store access logs for\n      your CloudFront distribution or Application  Load Balancer. More about bucket\n      name restriction here: http://amzn.to/1p1YlU5.  If you chose to deactivate this\n      protection, ignore this parameter. '\n  RequestThreshold:\n    Type: Number\n    Default: 100\n    MinValue: 0\n    Description: If you chose yes for the Activate HTTP Flood Protection parameter,\n      enter the maximum acceptable requests per FIVE-minute period per IP address.\n      Please note that AWS WAF rate based rule requires values greater than 100 (if\n      you chose Lambda/Athena log parser options, you can use any value greater than\n      zero). If you chose to deactivate this protection, ignore this parameter.\n  ErrorThreshold:\n    Type: Number\n    Default: 50\n    MinValue: 0\n    Description: If you chose yes for the Activate Scanners & Probes Protection parameter,\n      enter the maximum acceptable bad requests per minute per IP. If you chose to\n      deactivate this protection,  ignore this parameter.\n  WAFBlockPeriod:\n    Type: Number\n    Default: 240\n    MinValue: 0\n    Description: If you chose yes for the Activate Scanners & Probes Protection or\n      HTTP Flood Lambda/Athena log parser parameters, enter the period (in minutes)\n      to block applicable IP addresses. If you chose to deactivate log parsing, ignore\n      this parameter.\n  KeepDataInOriginalS3Location:\n    Type: String\n    Default: 'No'\n    AllowedValues:\n    - 'Yes'\n    - 'No'\n    Description: If you chose Amazon Athena log parser for the Activate Scanners &\n      Probes Protection parameter,  partitioning will be applied to log files and\n      Athena queries. By default log files will be moved from their original location\n      to a partitioned folder structure in s3. Choose Yes if you also want to keep\n      a copy of the logs in their original location. Selecting \"Yes\" will duplicate\n      your log storage. If you did not choose to activate Athena log parsing, ignore\n      this parameter.\nConditions:\n  SqlInjectionProtectionActivated:\n    Fn::Equals:\n    - Ref: ActivateSqlInjectionProtectionParam\n    - 'yes'\n  CrossSiteScriptingProtectionActivated:\n    Fn::Equals:\n    - Ref: ActivateCrossSiteScriptingProtectionParam\n    - 'yes'\n  HttpFloodProtectionRateBasedRuleActivated:\n    Fn::Equals:\n    - Ref: ActivateHttpFloodProtectionParam\n    - yes - AWS WAF rate based rule\n  HttpFloodLambdaLogParser:\n    Fn::Equals:\n    - Ref: ActivateHttpFloodProtectionParam\n    - yes - AWS Lambda log parser\n  HttpFloodAthenaLogParser:\n    Fn::Equals:\n    - Ref: ActivateHttpFloodProtectionParam\n    - yes - Amazon Athena log parser\n  HttpFloodProtectionLogParserActivated:\n    Fn::Or:\n    - Condition: HttpFloodLambdaLogParser\n    - Condition: HttpFloodAthenaLogParser\n  ScannersProbesLambdaLogParser:\n    Fn::Equals:\n    - Ref: ActivateScannersProbesProtectionParam\n    - yes - AWS Lambda log parser\n  ScannersProbesAthenaLogParser:\n    Fn::Equals:\n    - Ref: ActivateScannersProbesProtectionParam\n    - yes - Amazon Athena log parser\n  ScannersProbesProtectionActivated:\n    Fn::Or:\n    - Condition: ScannersProbesLambdaLogParser\n    - Condition: ScannersProbesAthenaLogParser\n  AthenaLogParser:\n    Fn::Or:\n    - Condition: HttpFloodAthenaLogParser\n    - Condition: ScannersProbesAthenaLogParser\n  LogParser:\n    Fn::Or:\n    - Condition: HttpFloodProtectionLogParserActivated\n    - Condition: ScannersProbesProtectionActivated\n  CreateFirehoseAthenaStack:\n    Fn::Or:\n    - Condition: HttpFloodProtectionLogParserActivated\n    - Condition: AthenaLogParser\n  ReputationListsProtectionActivated:\n    Fn::Equals:\n    - Ref: ActivateReputationListsProtectionParam\n    - 'yes'\n  BadBotProtectionActivated:\n    Fn::Equals:\n    - Ref: ActivateBadBotProtectionParam\n    - 'yes'\n  AlbEndpoint:\n    Fn::Equals:\n    - Ref: EndpointType\n    - ALB\n  CloudFrontEndpoint:\n    Fn::Equals:\n    - Ref: EndpointType\n    - CloudFront\nMappings:\n  SourceCode:\n    General:\n      TemplateBucket: solutions-reference\n      SourceBucket: solutions\n      KeyPrefix: aws-waf-security-automations/v2.3.3\n  Solution:\n    Data:\n      SendAnonymousUsageData: 'Yes'\n      LogLevel: INFO\n    Action:\n      WAFWhitelistRule: ALLOW\n      WAFBlacklistRule: BLOCK\n      WAFSqlInjectionRule: BLOCK\n      WAFXssRule: BLOCK\n      WAFHttpFloodRateBasedRule: BLOCK\n      WAFHttpFloodRegularRule: BLOCK\n      WAFScannersProbesRule: BLOCK\n      WAFIPReputationListsRule: BLOCK\n      WAFBadBotRule: BLOCK\n    Athena:\n      QueryScheduledRunTime: 5\nResources:\n  LambdaRoleHelper:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      Path: /\n      Policies:\n      - PolicyName: S3Access\n        PolicyDocument:\n          Version: 2012-10-17\n          Statement:\n          - Effect: Allow\n            Action:\n            - s3:GetBucketLocation\n            - s3:GetObject\n            - s3:ListBucket\n            Resource:\n            - Fn::Sub: arn:aws:s3:::${AppAccessLogBucket}\n      - PolicyName: LogsAccess\n        PolicyDocument:\n          Version: 2012-10-17\n          Statement:\n          - Effect: Allow\n            Action:\n            - logs:CreateLogGroup\n            - logs:CreateLogStream\n            - logs:PutLogEvents\n            Resource:\n            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*Helper*\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W11\n          reason: LogsAccess permission restricted to account, region and log group\n            name substring (Helper).\n  Helper:\n    Type: AWS::Lambda::Function\n    Properties:\n      Description: This lambda function verifies the main project's dependencies,\n        requirements and implement auxiliary functions.\n      Handler: helper.lambda_handler\n      Role:\n        Fn::GetAtt:\n        - LambdaRoleHelper\n        - Arn\n      Code:\n        S3Bucket:\n          Fn::Join:\n          - '-'\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - SourceBucket\n            - Ref: AWS::Region\n        S3Key:\n          Fn::Join:\n          - /\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - KeyPrefix\n            - helper.zip\n      Environment:\n        Variables:\n          API_TYPE:\n            Fn::If:\n            - AlbEndpoint\n            - waf-regional\n            - waf\n          LOG_LEVEL:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - LogLevel\n      Runtime: python3.8\n      MemorySize: 128\n      Timeout: 300\n  CheckRequirements:\n    Type: Custom::CheckRequirements\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - Helper\n        - Arn\n      AthenaLogParser:\n        Fn::If:\n        - AthenaLogParser\n        - 'yes'\n        - 'no'\n      HttpFloodProtectionRateBasedRuleActivated:\n        Fn::If:\n        - HttpFloodProtectionRateBasedRuleActivated\n        - 'yes'\n        - 'no'\n      HttpFloodProtectionLogParserActivated:\n        Fn::If:\n        - HttpFloodProtectionLogParserActivated\n        - 'yes'\n        - 'no'\n      ProtectionActivatedScannersProbes:\n        Fn::If:\n        - ScannersProbesProtectionActivated\n        - 'yes'\n        - 'no'\n      AppAccessLogBucket:\n        Ref: AppAccessLogBucket\n      Region:\n        Ref: AWS::Region\n      EndpointType:\n        Ref: EndpointType\n      RequestThreshold:\n        Ref: RequestThreshold\n  CreateUniqueID:\n    Type: Custom::CreateUUID\n    DependsOn: CheckRequirements\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - Helper\n        - Arn\n  CreateDeliveryStreamName:\n    Type: Custom::CreateDeliveryStreamName\n    Condition: HttpFloodProtectionLogParserActivated\n    DependsOn: CheckRequirements\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - Helper\n        - Arn\n      StackName:\n        Ref: AWS::StackName\n  CreateGlueDatabaseName:\n    Type: Custom::CreateGlueDatabaseName\n    Condition: AthenaLogParser\n    DependsOn: CheckRequirements\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - Helper\n        - Arn\n      StackName:\n        Ref: AWS::StackName\n  WafLogBucket:\n    Type: AWS::S3::Bucket\n    Condition: HttpFloodProtectionLogParserActivated\n    DependsOn: CheckRequirements\n    DeletionPolicy: Retain\n    Properties:\n      AccessControl: Private\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n        - ServerSideEncryptionByDefault:\n            SSEAlgorithm: AES256\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W35\n          reason: WafLogBucket does not require access logging to be configured by\n            default.\n        - id: W51\n          reason: WafLogBucket does not require a bucket policy.\n  FirehoseAthenaStack:\n    Type: AWS::CloudFormation::Stack\n    Condition: CreateFirehoseAthenaStack\n    DependsOn: CheckRequirements\n    Properties:\n      TemplateURL:\n        Fn::Sub:\n        - https://s3.amazonaws.com/${S3Bucket}/${KeyPrefix}/aws-waf-security-automations-firehose-athena.template\n        - S3Bucket:\n            Fn::FindInMap:\n            - SourceCode\n            - General\n            - TemplateBucket\n          KeyPrefix:\n            Fn::FindInMap:\n            - SourceCode\n            - General\n            - KeyPrefix\n      Parameters:\n        ActivateHttpFloodProtectionParam:\n          Ref: ActivateHttpFloodProtectionParam\n        ActivateScannersProbesProtectionParam:\n          Ref: ActivateScannersProbesProtectionParam\n        EndpointType:\n          Ref: EndpointType\n        AppAccessLogBucket:\n          Ref: AppAccessLogBucket\n        ParentStackName:\n          Ref: AWS::StackName\n        WafLogBucket:\n          Fn::If:\n          - HttpFloodProtectionLogParserActivated\n          - Ref: WafLogBucket\n          - ''\n        WafLogBucketArn:\n          Fn::If:\n          - HttpFloodProtectionLogParserActivated\n          - Fn::GetAtt:\n            - WafLogBucket\n            - Arn\n          - ''\n        RequestThreshold:\n          Ref: RequestThreshold\n        ErrorThreshold:\n          Ref: ErrorThreshold\n        WAFBlockPeriod:\n          Ref: WAFBlockPeriod\n        GlueDatabaseName:\n          Fn::If:\n          - AthenaLogParser\n          - Fn::GetAtt:\n            - CreateGlueDatabaseName\n            - DatabaseName\n          - ''\n        DeliveryStreamName:\n          Fn::If:\n          - HttpFloodProtectionLogParserActivated\n          - Fn::GetAtt:\n            - CreateDeliveryStreamName\n            - DeliveryStreamName\n          - ''\n  AlbStack:\n    Type: AWS::CloudFormation::Stack\n    Condition: AlbEndpoint\n    DependsOn: CheckRequirements\n    Properties:\n      TemplateURL:\n        Fn::Sub:\n        - https://s3.amazonaws.com/${S3Bucket}/${KeyPrefix}/aws-waf-security-automations-alb.template\n        - S3Bucket:\n            Fn::FindInMap:\n            - SourceCode\n            - General\n            - TemplateBucket\n          KeyPrefix:\n            Fn::FindInMap:\n            - SourceCode\n            - General\n            - KeyPrefix\n      Parameters:\n        ActivateSqlInjectionProtectionParam:\n          Ref: ActivateSqlInjectionProtectionParam\n        ActivateCrossSiteScriptingProtectionParam:\n          Ref: ActivateCrossSiteScriptingProtectionParam\n        ActivateHttpFloodProtectionParam:\n          Ref: ActivateHttpFloodProtectionParam\n        ActivateScannersProbesProtectionParam:\n          Ref: ActivateScannersProbesProtectionParam\n        ActivateReputationListsProtectionParam:\n          Ref: ActivateReputationListsProtectionParam\n        ActivateBadBotProtectionParam:\n          Ref: ActivateBadBotProtectionParam\n        AppAccessLogBucket:\n          Ref: AppAccessLogBucket\n        WafApiType: waf-regional\n        WafArnPrefix:\n          Fn::Sub: 'arn:aws:waf-regional:${AWS::Region}:'\n        ParentStackName:\n          Ref: AWS::StackName\n        WafLogBucket:\n          Fn::If:\n          - HttpFloodProtectionLogParserActivated\n          - Ref: WafLogBucket\n          - ''\n        GlueAccessLogsDatabase:\n          Fn::If:\n          - AthenaLogParser\n          - Fn::GetAtt:\n            - FirehoseAthenaStack\n            - Outputs.GlueAccessLogsDatabase\n          - ''\n        GlueAppAccessLogsTable:\n          Fn::If:\n          - ScannersProbesAthenaLogParser\n          - Fn::GetAtt:\n            - FirehoseAthenaStack\n            - Outputs.ALBGlueAppAccessLogsTable\n          - ''\n        GlueWafAccessLogsTable:\n          Fn::If:\n          - HttpFloodAthenaLogParser\n          - Fn::GetAtt:\n            - FirehoseAthenaStack\n            - Outputs.GlueWafAccessLogsTable\n          - ''\n  CloudFrontStack:\n    Type: AWS::CloudFormation::Stack\n    Condition: CloudFrontEndpoint\n    DependsOn: CheckRequirements\n    Properties:\n      TemplateURL:\n        Fn::Sub:\n        - https://s3.amazonaws.com/${S3Bucket}/${KeyPrefix}/aws-waf-security-automations-cloudfront.template\n        - S3Bucket:\n            Fn::FindInMap:\n            - SourceCode\n            - General\n            - TemplateBucket\n          KeyPrefix:\n            Fn::FindInMap:\n            - SourceCode\n            - General\n            - KeyPrefix\n      Parameters:\n        ActivateSqlInjectionProtectionParam:\n          Ref: ActivateSqlInjectionProtectionParam\n        ActivateCrossSiteScriptingProtectionParam:\n          Ref: ActivateCrossSiteScriptingProtectionParam\n        ActivateHttpFloodProtectionParam:\n          Ref: ActivateHttpFloodProtectionParam\n        ActivateScannersProbesProtectionParam:\n          Ref: ActivateScannersProbesProtectionParam\n        ActivateReputationListsProtectionParam:\n          Ref: ActivateReputationListsProtectionParam\n        ActivateBadBotProtectionParam:\n          Ref: ActivateBadBotProtectionParam\n        AppAccessLogBucket:\n          Ref: AppAccessLogBucket\n        WafApiType: waf\n        WafArnPrefix: 'arn:aws:waf::'\n        ParentStackName:\n          Ref: AWS::StackName\n        WafLogBucket:\n          Fn::If:\n          - HttpFloodProtectionLogParserActivated\n          - Ref: WafLogBucket\n          - ''\n        GlueAccessLogsDatabase:\n          Fn::If:\n          - AthenaLogParser\n          - Fn::GetAtt:\n            - FirehoseAthenaStack\n            - Outputs.GlueAccessLogsDatabase\n          - ''\n        GlueAppAccessLogsTable:\n          Fn::If:\n          - ScannersProbesAthenaLogParser\n          - Fn::GetAtt:\n            - FirehoseAthenaStack\n            - Outputs.CloudFrontGlueAppAccessLogsTable\n          - ''\n        GlueWafAccessLogsTable:\n          Fn::If:\n          - HttpFloodAthenaLogParser\n          - Fn::GetAtt:\n            - FirehoseAthenaStack\n            - Outputs.GlueWafAccessLogsTable\n          - ''\n  LogParser:\n    Type: AWS::Lambda::Function\n    Condition: LogParser\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W58\n          reason: Log permissions are defined in the LambdaRoleLogParser policies\n    Properties:\n      Description:\n        Fn::Sub: 'This function parses access logs to identify suspicious behavior,\n          such as an abnormal amount of errors. It then blocks those IP addresses\n          for a customer-defined period of time. Parameters: ${RequestThreshold},\n          ${ErrorThreshold} and ${WAFBlockPeriod}.\n\n          '\n      Handler: log-parser.lambda_handler\n      Role:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.LambdaRoleLogParserArn\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.LambdaRoleLogParserArn\n      Code:\n        S3Bucket:\n          Fn::Join:\n          - '-'\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - SourceBucket\n            - Ref: AWS::Region\n        S3Key:\n          Fn::Join:\n          - /\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - KeyPrefix\n            - log-parser.zip\n      Environment:\n        Variables:\n          APP_ACCESS_LOG_BUCKET:\n            Fn::If:\n            - ScannersProbesProtectionActivated\n            - Ref: AppAccessLogBucket\n            - Ref: AWS::NoValue\n          WAF_ACCESS_LOG_BUCKET:\n            Fn::If:\n            - HttpFloodProtectionLogParserActivated\n            - Ref: WafLogBucket\n            - Ref: AWS::NoValue\n          SEND_ANONYMOUS_USAGE_DATA:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - SendAnonymousUsageData\n          UUID:\n            Fn::GetAtt:\n            - CreateUniqueID\n            - UUID\n          LIMIT_IP_ADDRESS_RANGES_PER_IP_MATCH_CONDITION: '10000'\n          MAX_AGE_TO_UPDATE: '30'\n          REGION:\n            Ref: AWS::Region\n          LOG_TYPE:\n            Fn::If:\n            - AlbEndpoint\n            - alb\n            - cloudfront\n          METRIC_NAME_PREFIX:\n            Fn::Join:\n            - ''\n            - Fn::Split:\n              - '-'\n              - Ref: AWS::StackName\n          LOG_LEVEL:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - LogLevel\n          STACK_NAME:\n            Ref: AWS::StackName\n          IP_SET_ID_HTTP_FLOOD:\n            Fn::If:\n            - HttpFloodProtectionLogParserActivated\n            - Fn::If:\n              - AlbEndpoint\n              - Fn::GetAtt:\n                - AlbStack\n                - Outputs.WAFHttpFloodSet\n              - Fn::GetAtt:\n                - CloudFrontStack\n                - Outputs.WAFHttpFloodSet\n            - Ref: AWS::NoValue\n          IP_SET_ID_SCANNERS_PROBES:\n            Fn::If:\n            - ScannersProbesProtectionActivated\n            - Fn::If:\n              - AlbEndpoint\n              - Fn::GetAtt:\n                - AlbStack\n                - Outputs.WAFScannersProbesSet\n              - Fn::GetAtt:\n                - CloudFrontStack\n                - Outputs.WAFScannersProbesSet\n            - Ref: AWS::NoValue\n          WAF_BLOCK_PERIOD:\n            Ref: WAFBlockPeriod\n          ERROR_THRESHOLD:\n            Ref: ErrorThreshold\n          REQUEST_THRESHOLD:\n            Ref: RequestThreshold\n      Runtime: python3.8\n      MemorySize: 512\n      Timeout: 300\n  MoveS3LogsForPartition:\n    Type: AWS::Lambda::Function\n    Condition: ScannersProbesAthenaLogParser\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W58\n          reason: Log permissions are defined in the LambdaRolePartitionS3Logs policies\n    Properties:\n      Description: This function is triggered by S3 event to move log files(upon their\n        arrival in s3) from their original location to a partitioned folder structure\n        created per timestamps in file names, hence allowing the usage of partitioning\n        within AWS Athena.\n      Handler: partition_s3_logs.lambda_handler\n      Role:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.LambdaRolePartitionS3LogsArn\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.LambdaRolePartitionS3LogsArn\n      Code:\n        S3Bucket:\n          Fn::Join:\n          - '-'\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - SourceBucket\n            - Ref: AWS::Region\n        S3Key:\n          Fn::Join:\n          - /\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - KeyPrefix\n            - log-parser.zip\n      Environment:\n        Variables:\n          LOG_LEVEL:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - LogLevel\n          KEEP_ORIGINAL_DATA:\n            Ref: KeepDataInOriginalS3Location\n          ENDPOINT:\n            Ref: EndpointType\n      Runtime: python3.8\n      MemorySize: 512\n      Timeout: 300\n  AddAthenaPartitions:\n    Type: AWS::Lambda::Function\n    Condition: AthenaLogParser\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W58\n          reason: Log permissions are defined in the LambdaRoleAddAthenaPartitions\n            policies\n    Properties:\n      Description: This function adds a new hourly partition to athena table. It runs\n        every hour, triggered by a CloudWatch event.\n      Handler: add_athena_partitions.lambda_handler\n      Role:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.LambdaRoleAddAthenaPartitionsArn\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.LambdaRoleAddAthenaPartitionsArn\n      Code:\n        S3Bucket:\n          Fn::Join:\n          - '-'\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - SourceBucket\n            - Ref: AWS::Region\n        S3Key:\n          Fn::Join:\n          - /\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - KeyPrefix\n            - log-parser.zip\n      Environment:\n        Variables:\n          LOG_LEVEL:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - LogLevel\n      Runtime: python3.8\n      MemorySize: 512\n      Timeout: 300\n  LambdaInvokePermissionAppLogParserS3:\n    Type: AWS::Lambda::Permission\n    Condition: LogParser\n    Properties:\n      FunctionName:\n        Fn::GetAtt:\n        - LogParser\n        - Arn\n      Action: lambda:InvokeFunction\n      Principal: s3.amazonaws.com\n      SourceAccount:\n        Ref: AWS::AccountId\n  LambdaInvokePermissionMoveS3LogsForPartition:\n    Type: AWS::Lambda::Permission\n    Condition: ScannersProbesAthenaLogParser\n    Properties:\n      FunctionName:\n        Fn::GetAtt:\n        - MoveS3LogsForPartition\n        - Arn\n      Action: lambda:InvokeFunction\n      Principal: s3.amazonaws.com\n      SourceAccount:\n        Ref: AWS::AccountId\n  LambdaPermissionAddAthenaPartitions:\n    Type: AWS::Lambda::Permission\n    Condition: AthenaLogParser\n    Properties:\n      FunctionName:\n        Fn::GetAtt:\n        - AddAthenaPartitions\n        - Arn\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n      SourceArn:\n        Fn::GetAtt:\n        - LambdaAddAthenaPartitionsEventsRule\n        - Arn\n  LambdaAthenaWAFLogParser:\n    Type: AWS::Events::Rule\n    Condition: HttpFloodAthenaLogParser\n    Properties:\n      Description: Security Automations - WAF Logs Athena parser\n      ScheduleExpression:\n        Fn::Join:\n        - ''\n        - - rate(\n          - Fn::FindInMap:\n            - Solution\n            - Athena\n            - QueryScheduledRunTime\n          - ' minutes)'\n      Targets:\n      - Arn:\n          Fn::GetAtt:\n          - LogParser\n          - Arn\n        Id: LogParser\n        Input:\n          Fn::Sub: \"{\\n  \\\"resourceType\\\": \\\"LambdaAthenaWAFLogParser\\\",\\n  \\\"glueAccessLogsDatabase\\\"\\\n            : \\\"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\\\",\\n  \\\"accessLogBucket\\\"\\\n            : \\\"${WafLogBucket}\\\",\\n  \\\"glueWafAccessLogsTable\\\": \\\"${FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable}\\\"\\\n            ,\\n  \\\"athenaWorkGroup\\\":\\\"${FirehoseAthenaStack.Outputs.WAFLogAthenaQueryWorkGroup}\\\"\\\n            \\n}\\n\"\n  LambdaInvokePermissionWafLogParserCloudWatch:\n    Type: AWS::Lambda::Permission\n    Condition: HttpFloodAthenaLogParser\n    Properties:\n      FunctionName:\n        Ref: LogParser\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n      SourceArn:\n        Fn::GetAtt:\n        - LambdaAthenaWAFLogParser\n        - Arn\n  LambdaAthenaAppLogParser:\n    Type: AWS::Events::Rule\n    Condition: ScannersProbesAthenaLogParser\n    Properties:\n      Description: Security Automations - App Logs Athena parser\n      ScheduleExpression:\n        Fn::Join:\n        - ''\n        - - rate(\n          - Fn::FindInMap:\n            - Solution\n            - Athena\n            - QueryScheduledRunTime\n          - ' minutes)'\n      Targets:\n      - Arn:\n          Fn::GetAtt:\n          - LogParser\n          - Arn\n        Id: LogParser\n        Input:\n          Fn::Sub: \"{\\n  \\\"resourceType\\\": \\\"LambdaAthenaAppLogParser\\\",\\n  \\\"glueAccessLogsDatabase\\\"\\\n            : \\\"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\\\",\\n  \\\"accessLogBucket\\\"\\\n            : \\\"${AppAccessLogBucket}\\\",\\n  \\\"glueAppAccessLogsTable\\\": \\\"${FirehoseAthenaStack.Outputs.GlueAppAccessLogsTable}\\\"\\\n            ,\\n  \\\"athenaWorkGroup\\\": \\\"${FirehoseAthenaStack.Outputs.WAFAppAccessLogAthenaQueryWorkGroup}\\\"\\\n            \\n}\\n\"\n  LambdaAddAthenaPartitionsEventsRule:\n    Type: AWS::Events::Rule\n    Condition: AthenaLogParser\n    Properties:\n      Description: Security Automations - Add partitions to Athena table\n      ScheduleExpression: rate(1 hour)\n      State: ENABLED\n      Targets:\n      - Arn:\n          Fn::GetAtt:\n          - AddAthenaPartitions\n          - Arn\n        Id: LambdaAddAthenaPartitions\n        Input:\n          Fn::Sub:\n          - \"{\\n  \\\"resourceType\\\": \\\"LambdaAddAthenaPartitionsEventsRule\\\",\\n  \\\"\\\n            glueAccessLogsDatabase\\\": \\\"${GlueAccessLogsDatabase}\\\",\\n  \\\"accessLogBucket\\\"\\\n            : \\\"${AppAccessLogBucket}\\\",\\n  \\\"glueAppAccessLogsTable\\\": \\\"${GlueAppAccessLogsTable}\\\"\\\n            ,\\n  \\\"glueWafAccessLogsTable\\\": \\\"${GlueWafAccessLogsTable}\\\",\\n  \\\"\\\n            wafLogBucket\\\": \\\"${WafLogBucket}\\\",\\n  \\\"athenaWorkGroup\\\": \\\"${AthenaWorkGroup}\\\"\\\n            \\n}\"\n          - GlueAccessLogsDatabase:\n              Fn::GetAtt:\n              - FirehoseAthenaStack\n              - Outputs.GlueAccessLogsDatabase\n            AppAccessLogBucket:\n              Fn::If:\n              - ScannersProbesAthenaLogParser\n              - Ref: AppAccessLogBucket\n              - ''\n            GlueAppAccessLogsTable:\n              Fn::If:\n              - ScannersProbesAthenaLogParser\n              - Fn::GetAtt:\n                - FirehoseAthenaStack\n                - Outputs.GlueAppAccessLogsTable\n              - ''\n            GlueWafAccessLogsTable:\n              Fn::If:\n              - HttpFloodAthenaLogParser\n              - Fn::GetAtt:\n                - FirehoseAthenaStack\n                - Outputs.GlueWafAccessLogsTable\n              - ''\n            WafLogBucket:\n              Fn::If:\n              - HttpFloodAthenaLogParser\n              - Ref: WafLogBucket\n              - ''\n            AthenaWorkGroup:\n              Fn::GetAtt:\n              - FirehoseAthenaStack\n              - Outputs.WAFAddPartitionAthenaQueryWorkGroup\n  LambdaInvokePermissionAppLogParserCloudWatch:\n    Type: AWS::Lambda::Permission\n    Condition: ScannersProbesAthenaLogParser\n    Properties:\n      FunctionName:\n        Ref: LogParser\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n      SourceArn:\n        Fn::GetAtt:\n        - LambdaAthenaAppLogParser\n        - Arn\n  ReputationListsParser:\n    Type: AWS::Lambda::Function\n    Condition: ReputationListsProtectionActivated\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W58\n          reason: Log permissions are defined in the LambdaRoleReputationListsParser\n            policies\n    Properties:\n      Description: This lambda function checks third-party IP reputation lists hourly\n        for new IP ranges to block. These lists include the Spamhaus Dont Route Or\n        Peer (DROP) and Extended Drop (EDROP) lists, the Proofpoint Emerging Threats\n        IP list, and the Tor exit node list.\n      Handler: reputation-lists-parser.handler\n      Role:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.LambdaRoleReputationListsParserArn\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.LambdaRoleReputationListsParserArn\n      Code:\n        S3Bucket:\n          Fn::Join:\n          - '-'\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - SourceBucket\n            - Ref: AWS::Region\n        S3Key:\n          Fn::Join:\n          - /\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - KeyPrefix\n            - reputation-lists-parser.zip\n      Runtime: nodejs10.x\n      MemorySize: 256\n      Timeout: 300\n      Environment:\n        Variables:\n          SEND_ANONYMOUS_USAGE_DATA:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - SendAnonymousUsageData\n          UUID:\n            Fn::GetAtt:\n            - CreateUniqueID\n            - UUID\n          METRIC_NAME_PREFIX:\n            Fn::Join:\n            - ''\n            - Fn::Split:\n              - '-'\n              - Ref: AWS::StackName\n          LOG_LEVEL:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - LogLevel\n  ReputationListsParserEventsRule:\n    Type: AWS::Events::Rule\n    Condition: ReputationListsProtectionActivated\n    Properties:\n      Description: Security Automations - WAF Reputation Lists\n      ScheduleExpression: rate(1 hour)\n      Targets:\n      - Arn:\n          Fn::GetAtt:\n          - ReputationListsParser\n          - Arn\n        Id: ReputationListsParser\n        Input:\n          Fn::Sub:\n          - \"{\\n  \\\"lists\\\": [\\n    {\\\"url\\\":\\\"https://www.spamhaus.org/drop/drop.txt\\\"\\\n            },\\n    {\\\"url\\\":\\\"https://www.spamhaus.org/drop/edrop.txt\\\"},\\n    {\\\"\\\n            url\\\":\\\"https://check.torproject.org/exit-addresses\\\", \\\"prefix\\\":\\\"ExitAddress\\\"\\\n            },\\n    {\\\"url\\\":\\\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\\\"\\\n            }\\n  ],\\n  \\\"apiType\\\": \\\"${ApiType}\\\",\\n  \\\"region\\\": \\\"${AWS::Region}\\\"\\\n            ,\\n  \\\"ipSetIds\\\": [\\\"${WAFReputationListsSet}\\\"]\\n}\"\n          - ApiType:\n              Fn::If:\n              - AlbEndpoint\n              - waf-regional\n              - waf\n            WAFReputationListsSet:\n              Fn::If:\n              - AlbEndpoint\n              - Fn::GetAtt:\n                - AlbStack\n                - Outputs.WAFReputationListsSet\n              - Fn::GetAtt:\n                - CloudFrontStack\n                - Outputs.WAFReputationListsSet\n  LambdaInvokePermissionReputationListsParser:\n    Type: AWS::Lambda::Permission\n    Condition: ReputationListsProtectionActivated\n    Properties:\n      FunctionName:\n        Ref: ReputationListsParser\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n      SourceArn:\n        Fn::GetAtt:\n        - ReputationListsParserEventsRule\n        - Arn\n  BadBotParser:\n    Type: AWS::Lambda::Function\n    Condition: BadBotProtectionActivated\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W58\n          reason: Log permissions are defined in the LambdaRoleBadBot policies\n    Properties:\n      Description: This lambda function will intercepts and inspects trap endpoint\n        requests to extract its IP address, and then add it to an AWS WAF block list.\n      Handler: access-handler.lambda_handler\n      Role:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.LambdaRoleBadBotArn\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.LambdaRoleBadBotArn\n      Code:\n        S3Bucket:\n          Fn::Join:\n          - '-'\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - SourceBucket\n            - Ref: AWS::Region\n        S3Key:\n          Fn::Join:\n          - /\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - KeyPrefix\n            - access-handler.zip\n      Environment:\n        Variables:\n          IP_SET_ID_BAD_BOT:\n            Fn::If:\n            - AlbEndpoint\n            - Fn::GetAtt:\n              - AlbStack\n              - Outputs.WAFBadBotSet\n            - Fn::GetAtt:\n              - CloudFrontStack\n              - Outputs.WAFBadBotSet\n          SEND_ANONYMOUS_USAGE_DATA:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - SendAnonymousUsageData\n          UUID:\n            Fn::GetAtt:\n            - CreateUniqueID\n            - UUID\n          REGION:\n            Ref: AWS::Region\n          LOG_TYPE:\n            Fn::If:\n            - AlbEndpoint\n            - alb\n            - cloudfront\n          METRIC_NAME_PREFIX:\n            Fn::Join:\n            - ''\n            - Fn::Split:\n              - '-'\n              - Ref: AWS::StackName\n          LOG_LEVEL:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - LogLevel\n      Runtime: python3.8\n      MemorySize: 128\n      Timeout: 300\n  LambdaInvokePermissionBadBot:\n    Type: AWS::Lambda::Permission\n    Condition: BadBotProtectionActivated\n    Properties:\n      FunctionName:\n        Fn::GetAtt:\n        - BadBotParser\n        - Arn\n      Action: lambda:InvokeFunction\n      Principal: apigateway.amazonaws.com\n  ApiGatewayBadBot:\n    Type: AWS::ApiGateway::RestApi\n    Condition: BadBotProtectionActivated\n    DependsOn: CheckRequirements\n    Properties:\n      Name: Security Automations - WAF Bad Bot API\n      Description: API created by AWS WAF Security Automations CloudFormation template.\n        This endpoint will be used to capture bad bots.\n  ApiGatewayBadBotResource:\n    Type: AWS::ApiGateway::Resource\n    Condition: BadBotProtectionActivated\n    Properties:\n      RestApiId:\n        Ref: ApiGatewayBadBot\n      ParentId:\n        Fn::GetAtt:\n        - ApiGatewayBadBot\n        - RootResourceId\n      PathPart: '{proxy+}'\n  ApiGatewayBadBotMethodRoot:\n    Type: AWS::ApiGateway::Method\n    Condition: BadBotProtectionActivated\n    DependsOn: LambdaInvokePermissionBadBot\n    Properties:\n      RestApiId:\n        Ref: ApiGatewayBadBot\n      ResourceId:\n        Fn::GetAtt:\n        - ApiGatewayBadBot\n        - RootResourceId\n      HttpMethod: ANY\n      AuthorizationType: NONE\n      RequestParameters:\n        method.request.header.X-Forwarded-For: false\n      Integration:\n        Type: AWS_PROXY\n        IntegrationHttpMethod: POST\n        Uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadBotParser.Arn}/invocations\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W59\n          reason: Creating a honeypot to lure badbots away.\n  ApiGatewayBadBotMethod:\n    Type: AWS::ApiGateway::Method\n    Condition: BadBotProtectionActivated\n    DependsOn: LambdaInvokePermissionBadBot\n    Properties:\n      RestApiId:\n        Ref: ApiGatewayBadBot\n      ResourceId:\n        Ref: ApiGatewayBadBotResource\n      HttpMethod: ANY\n      AuthorizationType: NONE\n      RequestParameters:\n        method.request.header.X-Forwarded-For: false\n      Integration:\n        Type: AWS_PROXY\n        IntegrationHttpMethod: POST\n        Uri:\n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BadBotParser.Arn}/invocations\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W59\n          reason: Creating a honeypot to lure badbots away.\n  ApiGatewayBadBotDeployment:\n    Type: AWS::ApiGateway::Deployment\n    Condition: BadBotProtectionActivated\n    DependsOn: ApiGatewayBadBotMethod\n    Properties:\n      RestApiId:\n        Ref: ApiGatewayBadBot\n      Description: CloudFormation Deployment Stage\n      StageName: CFDeploymentStage\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W45\n          reason: Log not needed for this component.\n        - id: W68\n          reason: Usage Plan not required.\n  ApiGatewayBadBotStage:\n    Type: AWS::ApiGateway::Stage\n    Condition: BadBotProtectionActivated\n    Properties:\n      DeploymentId:\n        Ref: ApiGatewayBadBotDeployment\n      Description: Production Stage\n      RestApiId:\n        Ref: ApiGatewayBadBot\n      StageName: ProdStage\n      AccessLogSetting:\n        DestinationArn:\n          Fn::GetAtt:\n          - ApiGatewayBadBotStageAccessLogGroup\n          - Arn\n        Format: '{\"sourceIp\": \"$context.identity.sourceIp\", \"caller\": \"$context.identity.caller\",\n          \"user\": \"$context.identity.user\", \"requestTime\": \"$context.requestTime\",\n          \"httpMethod\": \"$context.httpMethod\", \"resourcePath\": \"$context.resourcePath\",\n          \"protocol\": \"$context.protocol\", \"status\": \"$context.status\", \"responseLength\":\n          \"$context.responseLength\", \"requestId\": \"$context.requestId\"}'\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W64\n          reason: Usage Plan not required.\n  ApiGatewayBadBotStageAccessLogGroup:\n    Type: AWS::Logs::LogGroup\n    Condition: BadBotProtectionActivated\n  ApiGatewayBadBotCloudWatchRole:\n    Type: AWS::IAM::Role\n    Condition: BadBotProtectionActivated\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Action: sts:AssumeRole\n          Effect: Allow\n          Principal:\n            Service: apigateway.amazonaws.com\n      Policies:\n      - PolicyName: LambdaRestApiCloudWatchRole\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          - Action:\n            - logs:CreateLogGroup\n            - logs:CreateLogStream\n            - logs:DescribeLogGroups\n            - logs:DescribeLogStreams\n            - logs:PutLogEvents\n            - logs:GetLogEvents\n            - logs:FilterLogEvents\n            Effect: Allow\n            Resource:\n            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*\n  ApiGatewayBadBotAccount:\n    Type: AWS::ApiGateway::Account\n    Condition: BadBotProtectionActivated\n    Properties:\n      CloudWatchRoleArn:\n        Fn::GetAtt:\n        - ApiGatewayBadBotCloudWatchRole\n        - Arn\n    DependsOn:\n    - ApiGatewayBadBot\n  CustomResource:\n    Type: AWS::Lambda::Function\n    Metadata:\n      cfn_nag:\n        rules_to_suppress:\n        - id: W58\n          reason: Log permissions are defined in the LambdaRoleCustomResource policies\n    Properties:\n      Description: This lambda function configures the Web ACL rules based on the\n        features enabled in the CloudFormation template.\n      Handler: custom-resource.lambda_handler\n      Role:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.LambdaRoleCustomResourceArn\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.LambdaRoleCustomResourceArn\n      Code:\n        S3Bucket:\n          Fn::Join:\n          - '-'\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - SourceBucket\n            - Ref: AWS::Region\n        S3Key:\n          Fn::Join:\n          - /\n          - - Fn::FindInMap:\n              - SourceCode\n              - General\n              - KeyPrefix\n            - custom-resource.zip\n      Environment:\n        Variables:\n          API_TYPE:\n            Fn::If:\n            - AlbEndpoint\n            - waf-regional\n            - waf\n          LOG_LEVEL:\n            Fn::FindInMap:\n            - Solution\n            - Data\n            - LogLevel\n      Runtime: python3.8\n      MemorySize: 128\n      Timeout: 300\n  ConfigureAWSWAFLogs:\n    Type: Custom::ConfigureAWSWAFLogs\n    Condition: HttpFloodProtectionLogParserActivated\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      WAFWebACLArn:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFWebACLArn\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFWebACLArn\n      DeliveryStreamArn:\n        Fn::GetAtt:\n        - FirehoseAthenaStack\n        - Outputs.FirehoseWAFLogsDeliveryStreamArn\n  ConfigureAppAccessLogBucket:\n    Type: Custom::ConfigureAppAccessLogBucket\n    Condition: ScannersProbesProtectionActivated\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      Region:\n        Ref: AWS::Region\n      AppAccessLogBucket:\n        Ref: AppAccessLogBucket\n      LogParser:\n        Fn::If:\n        - LogParser\n        - Fn::GetAtt:\n          - LogParser\n          - Arn\n        - Ref: AWS::NoValue\n      ScannersProbesLambdaLogParser:\n        Fn::If:\n        - ScannersProbesLambdaLogParser\n        - 'yes'\n        - 'no'\n      ScannersProbesAthenaLogParser:\n        Fn::If:\n        - ScannersProbesAthenaLogParser\n        - 'yes'\n        - 'no'\n      MoveS3LogsForPartition:\n        Fn::If:\n        - ScannersProbesAthenaLogParser\n        - Fn::GetAtt:\n          - MoveS3LogsForPartition\n          - Arn\n        - Ref: AWS::NoValue\n  ConfigureWafLogBucket:\n    Type: Custom::ConfigureWafLogBucket\n    Condition: HttpFloodProtectionLogParserActivated\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      WafLogBucket:\n        Ref: WafLogBucket\n      LogParser:\n        Fn::If:\n        - LogParser\n        - Fn::GetAtt:\n          - LogParser\n          - Arn\n        - Ref: AWS::NoValue\n      HttpFloodLambdaLogParser:\n        Fn::If:\n        - HttpFloodLambdaLogParser\n        - 'yes'\n        - 'no'\n      HttpFloodAthenaLogParser:\n        Fn::If:\n        - HttpFloodAthenaLogParser\n        - 'yes'\n        - 'no'\n  ConfigureRateBasedRule:\n    Type: Custom::ConfigureRateBasedRule\n    Condition: HttpFloodProtectionRateBasedRuleActivated\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      StackName:\n        Ref: AWS::StackName\n      RequestThreshold:\n        Ref: RequestThreshold\n      MetricNamePrefix:\n        Fn::Join:\n        - ''\n        - Fn::Split:\n          - '-'\n          - Ref: AWS::StackName\n  GenerateAppLogParserConfFile:\n    Type: Custom::GenerateAppLogParserConfFile\n    Condition: ScannersProbesLambdaLogParser\n    DependsOn: ConfigureAppAccessLogBucket\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      StackName:\n        Ref: AWS::StackName\n      AppAccessLogBucket:\n        Ref: AppAccessLogBucket\n      ErrorThreshold:\n        Ref: ErrorThreshold\n      WAFBlockPeriod:\n        Ref: WAFBlockPeriod\n      WAFScannersProbesSet:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFScannersProbesSet\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFScannersProbesSet\n  GenerateWafLogParserConfFile:\n    Type: Custom::GenerateWafLogParserConfFile\n    Condition: HttpFloodLambdaLogParser\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      StackName:\n        Ref: AWS::StackName\n      WafAccessLogBucket:\n        Ref: WafLogBucket\n      RequestThreshold:\n        Ref: RequestThreshold\n      WAFBlockPeriod:\n        Ref: WAFBlockPeriod\n      WAFHttpFloodSet:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFHttpFloodSet\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFHttpFloodSet\n  ConfigureWebAcl:\n    Type: Custom::ConfigureWebAcl\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      ActivateSqlInjectionProtectionParam:\n        Ref: ActivateSqlInjectionProtectionParam\n      ActivateCrossSiteScriptingProtectionParam:\n        Ref: ActivateCrossSiteScriptingProtectionParam\n      ActivateHttpFloodProtectionParam:\n        Ref: ActivateHttpFloodProtectionParam\n      ActivateScannersProbesProtectionParam:\n        Ref: ActivateScannersProbesProtectionParam\n      ActivateReputationListsProtectionParam:\n        Ref: ActivateReputationListsProtectionParam\n      ActivateBadBotProtectionParam:\n        Ref: ActivateBadBotProtectionParam\n      ProtectionActivatedSqlInjection:\n        Fn::If:\n        - SqlInjectionProtectionActivated\n        - 'yes'\n        - 'no'\n      ProtectionActivatedCrossSiteScripting:\n        Fn::If:\n        - CrossSiteScriptingProtectionActivated\n        - 'yes'\n        - 'no'\n      ProtectionActivatedHttpFloodRateBased:\n        Fn::If:\n        - HttpFloodProtectionRateBasedRuleActivated\n        - 'yes'\n        - 'no'\n      ProtectionActivatedHttpFloodRegular:\n        Fn::If:\n        - HttpFloodProtectionLogParserActivated\n        - 'yes'\n        - 'no'\n      ProtectionActivatedScannersProbes:\n        Fn::If:\n        - ScannersProbesProtectionActivated\n        - 'yes'\n        - 'no'\n      ProtectionActivatedReputationLists:\n        Fn::If:\n        - ReputationListsProtectionActivated\n        - 'yes'\n        - 'no'\n      ProtectionActivatedBadBot:\n        Fn::If:\n        - BadBotProtectionActivated\n        - 'yes'\n        - 'no'\n      WAFWebACL:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFWebACL\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFWebACL\n      WAFWhitelistRule:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFWhitelistRule\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFWhitelistRule\n      WAFBlacklistRule:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFBlacklistRule\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFBlacklistRule\n      WAFSqlInjectionRule:\n        Fn::If:\n        - SqlInjectionProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFSqlInjectionRule\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFSqlInjectionRule\n        - Ref: AWS::NoValue\n      WAFXssRule:\n        Fn::If:\n        - CrossSiteScriptingProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFXssRule\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFXssRule\n        - Ref: AWS::NoValue\n      WAFHttpFloodRateBasedRule:\n        Fn::If:\n        - HttpFloodProtectionRateBasedRuleActivated\n        - Fn::GetAtt:\n          - ConfigureRateBasedRule\n          - RateBasedRuleId\n        - Ref: AWS::NoValue\n      WAFHttpFloodRegularRule:\n        Fn::If:\n        - HttpFloodProtectionLogParserActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFHttpFloodRegularRule\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFHttpFloodRegularRule\n        - Ref: AWS::NoValue\n      WAFScannersProbesRule:\n        Fn::If:\n        - ScannersProbesProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFScannersProbesRule\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFScannersProbesRule\n        - Ref: AWS::NoValue\n      WAFIPReputationListsRule:\n        Fn::If:\n        - ReputationListsProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFIPReputationListsRule\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFIPReputationListsRule\n        - Ref: AWS::NoValue\n      WAFBadBotRule:\n        Fn::If:\n        - BadBotProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFBadBotRule\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFBadBotRule\n        - Ref: AWS::NoValue\n      ActionWAFWhitelistRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFWhitelistRule\n      ActionWAFBlacklistRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFBlacklistRule\n      ActionWAFSqlInjectionRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFSqlInjectionRule\n      ActionWAFXssRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFXssRule\n      ActionWAFHttpFloodRateBasedRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFHttpFloodRateBasedRule\n      ActionWAFHttpFloodRegularRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFHttpFloodRegularRule\n      ActionWAFScannersProbesRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFScannersProbesRule\n      ActionWAFIPReputationListsRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFIPReputationListsRule\n      ActionWAFBadBotRule:\n        Fn::FindInMap:\n        - Solution\n        - Action\n        - WAFBadBotRule\n      WAFWhitelistSet:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFWhitelistSet\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFWhitelistSet\n      WAFBlacklistSet:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFBlacklistSet\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFBlacklistSet\n      WAFHttpFloodSet:\n        Fn::If:\n        - HttpFloodProtectionLogParserActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFHttpFloodSet\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFHttpFloodSet\n        - Ref: AWS::NoValue\n      WAFScannersProbesSet:\n        Fn::If:\n        - ScannersProbesProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFScannersProbesSet\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFScannersProbesSet\n        - Ref: AWS::NoValue\n      WAFReputationListsSet:\n        Fn::If:\n        - ReputationListsProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFReputationListsSet\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFReputationListsSet\n        - Ref: AWS::NoValue\n      WAFBadBotSet:\n        Fn::If:\n        - BadBotProtectionActivated\n        - Fn::If:\n          - AlbEndpoint\n          - Fn::GetAtt:\n            - AlbStack\n            - Outputs.WAFBadBotSet\n          - Fn::GetAtt:\n            - CloudFrontStack\n            - Outputs.WAFBadBotSet\n        - Ref: AWS::NoValue\n      UUID:\n        Fn::GetAtt:\n        - CreateUniqueID\n        - UUID\n      Region:\n        Ref: AWS::Region\n      RequestThreshold:\n        Ref: RequestThreshold\n      ErrorThreshold:\n        Ref: ErrorThreshold\n      WAFBlockPeriod:\n        Ref: WAFBlockPeriod\n      SendAnonymousUsageData:\n        Fn::FindInMap:\n        - Solution\n        - Data\n        - SendAnonymousUsageData\n  PopulateReputationList:\n    Type: Custom::PopulateReputationList\n    Condition: ReputationListsProtectionActivated\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      Region:\n        Ref: AWS::Region\n      ReputationListsParser:\n        Fn::GetAtt:\n        - ReputationListsParser\n        - Arn\n      WAFReputationListsSet:\n        Fn::If:\n        - AlbEndpoint\n        - Fn::GetAtt:\n          - AlbStack\n          - Outputs.WAFReputationListsSet\n        - Fn::GetAtt:\n          - CloudFrontStack\n          - Outputs.WAFReputationListsSet\n  CustomAddAthenaPartitions:\n    Type: Custom::AddAthenaPartitions\n    Condition: AthenaLogParser\n    Properties:\n      ServiceToken:\n        Fn::GetAtt:\n        - CustomResource\n        - Arn\n      AddAthenaPartitionsLambda:\n        Fn::GetAtt:\n        - AddAthenaPartitions\n        - Arn\n      ResourceType: CustomResource\n      GlueAccessLogsDatabase:\n        Fn::GetAtt:\n        - FirehoseAthenaStack\n        - Outputs.GlueAccessLogsDatabase\n      AppAccessLogBucket:\n        Fn::If:\n        - ScannersProbesAthenaLogParser\n        - Ref: AppAccessLogBucket\n        - ''\n      GlueAppAccessLogsTable:\n        Fn::If:\n        - ScannersProbesAthenaLogParser\n        - Fn::GetAtt:\n          - FirehoseAthenaStack\n          - Outputs.GlueAppAccessLogsTable\n        - ''\n      GlueWafAccessLogsTable:\n        Fn::If:\n        - HttpFloodAthenaLogParser\n        - Fn::GetAtt:\n          - FirehoseAthenaStack\n          - Outputs.GlueWafAccessLogsTable\n        - ''\n      WafLogBucket:\n        Fn::If:\n        - HttpFloodAthenaLogParser\n        - Ref: WafLogBucket\n        - ''\n      AthenaWorkGroup:\n        Fn::GetAtt:\n        - FirehoseAthenaStack\n        - Outputs.WAFAddPartitionAthenaQueryWorkGroup\n  MonitoringDashboard:\n    Type: AWS::CloudWatch::Dashboard\n    DependsOn: CheckRequirements\n    Properties:\n      DashboardName:\n        Fn::Sub: ${AWS::StackName}-${AWS::Region}\n      DashboardBody:\n        Fn::Sub:\n        - \"{\\n  \\\"widgets\\\": [{\\n    \\\"type\\\": \\\"metric\\\",\\n    \\\"x\\\": 0,\\n    \\\"\\\n          y\\\": 0,\\n    \\\"width\\\": 15,\\n    \\\"height\\\": 10,\\n    \\\"properties\\\": {\\n\\\n          \\      \\\"view\\\": \\\"timeSeries\\\",\\n      \\\"stacked\\\": false,\\n      \\\"stat\\\"\\\n          : \\\"Sum\\\",\\n      \\\"period\\\": 300,\\n      \\\"metrics\\\": [\\n        [\\\"WAF\\\"\\\n          , \\\"BlockedRequests\\\", \\\"WebACL\\\", \\\"${WAFWebACLMetricName}\\\", \\\"Rule\\\"\\\n          , \\\"ALL\\\" ${RegionMetric}],\\n        [\\\"WAF\\\", \\\"AllowedRequests\\\", \\\"WebACL\\\"\\\n          , \\\"${WAFWebACLMetricName}\\\", \\\"Rule\\\", \\\"ALL\\\" ${RegionMetric}]\\n     \\\n          \\ ],\\n      \\\"region\\\": \\\"${RegionProperties}\\\"\\n    }\\n  }]\\n}\"\n        - WAFWebACLMetricName:\n            Fn::If:\n            - AlbEndpoint\n            - Fn::GetAtt:\n              - AlbStack\n              - Outputs.WAFWebACLMetricName\n            - Fn::GetAtt:\n              - CloudFrontStack\n              - Outputs.WAFWebACLMetricName\n          RegionMetric:\n            Fn::If:\n            - AlbEndpoint\n            - Fn::Sub: ', \"Region\", \"${AWS::Region}\"'\n            - ''\n          RegionProperties:\n            Fn::If:\n            - AlbEndpoint\n            - Fn::Sub: ${AWS::Region}\n            - us-east-1\nOutputs:\n  BadBotHoneypotEndpoint:\n    Description: Bad Bot Honeypot Endpoint\n    Value:\n      Fn::Sub: https://${ApiGatewayBadBot}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayBadBotStage}\n    Condition: BadBotProtectionActivated\n  WAFWebACL:\n    Description: AWS WAF WebACL ID\n    Value:\n      Fn::If:\n      - AlbEndpoint\n      - Fn::GetAtt:\n        - AlbStack\n        - Outputs.WAFWebACL\n      - Fn::GetAtt:\n        - CloudFrontStack\n        - Outputs.WAFWebACL\n  WafLogBucket:\n    Value:\n      Ref: WafLogBucket\n    Condition: HttpFloodProtectionLogParserActivated\n  AppAccessLogBucket:\n    Value:\n      Ref: AppAccessLogBucket\n    Condition: ScannersProbesProtectionActivated\n  SolutionVersion:\n    Description: Solution Version Number\n    Value: v2.3.3\n",
    "StagesAvailable": [
        "Original",
        "Processed"
    ]
}
